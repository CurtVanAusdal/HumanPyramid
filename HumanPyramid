#Cached Version of human pyramid algorithm, run with terminal - instructions in readme file 


# Curtis Van Ausdal
# CS-1410

import os
import math
from functools import cache  # not used but I coulda!
import argparse
import time
#cached version
'''The key for the dictionary is the tuple (r,c) and the value is the previously computed weight on the person 
in that (r,c) position.
 This technique is called “caching” or "memoizing", and is a common technique for avoiding recomputing results.'''

counter = 0
counter2 = 0
cache = {}


# CALCULATES THE SHOULDER WEIGHT PERSON IN (ROW,COL) IS BEARING ON TOP OF THEM (THEIR OWN WEIGHT EXCLUDED): I. E : "SHOULDER WEIGHT".


def weight_on(row, col):
    r = row
    c = col
    global counter2
    global counter
    counter += 1

    global cache
    cache = {}
    if (row, col) in cache:
        counter2 = counter2 + 1
        for key in cache:
            if key == (r, c):
                return cache[key]

    else:
        if row == 0:  # very top peice of pyramid
            result = 0
            cache.update({(0, 0): result})
        elif col == 0:  # left side
            result = (200 / 2) + ((weight_on(row - 1, 0)) / 2)
            cache.update({(row, 0): result})
        elif col == row:  # right side
            result = (200 / 2) + (weight_on(row - 1, col - 1) / 2)
            cache.update({(row, col): result})
        else:  # covers the middle rows
            result = 200 + (weight_on(row - 1, col - 1) + weight_on(row - 1,
                                                                    col)) / 2  # BEWARE TO WRITER: adding 200 made it work but I'm not sure why. My brain says to add 100 but it didn't work
            cache.update({(row, col): result})

    return result



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="ROWS")
    parser.add_argument('rows', type=int, help="number of rows to calculate")
    args = parser.parse_args()

    # takes given rows and spits out the shoulder weight of everyone in range of given row. prints information and also writes it to file called part3.out
    start = time.perf_counter()
    with open('part3.out', 'w') as outfile:
        for row in range(args.rows):
            row_values = []
            for col in range(row + 1):
                shoulder_data = f'{weight_on(row, col):.2f}'
                row_values.append(shoulder_data)
            padding = ' ' * (args.rows - row - 1) * 6
            row_str = padding + ' '.join(row_values[::-1])
            print(row_str)
            outfile.write(row_str + '\n')

    end = time.perf_counter()

    time_elapsed = end - start
    print(f'Elapsed time: {time_elapsed:.10f} seconds')
    print(f'Number of function calls: {counter}')
    print(f'Number of cache hits: {counter2}')
